% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clean_email_addresses.R
\name{cleanemails}
\alias{cleanemails}
\title{Clean Email Addresses in a Data Frame}
\usage{
cleanemails(data, email_col_name)
}
\arguments{
\item{data}{A data frame containing the email addresses.}

\item{email_col_name}{A character string specifying the name of the column
in \code{data} that contains the email addresses.}
}
\value{
A data frame with the specified email column cleaned, invalid emails
(those without "@") removed, and duplicate rows removed.
If the specified column is not found or is not character/factor,
an error will be thrown.
}
\description{
This function cleans a specified column of email addresses within a data frame.
It performs several cleaning steps:
\itemize{
\item Converts emails to lowercase.
\item Removes leading and trailing whitespace.
\item Removes double quotation marks (\verb{"}).
\item Removes single quotation marks (\verb{'}).
\item Removes all space characters (\verb{ }).
\item Removes comma characters (\verb{,}).
\item Filters out rows where the cleaned email address does not contain an "@" symbol.
\item Removes duplicate rows from the entire data frame based on all columns after cleaning.
}
}
\examples{
# Create a sample data frame
sample_df <- data.frame(
  ID = 1:6,
  UserEmail = c(
    '  "john.doe@example.com"  ',
    "jane.doe@example.com'",
    "no_at_symbol.com",
    "  spaced out@example.com, ",
    "JOHN.DOE@EXAMPLE.COM", # Duplicate of the first after cleaning
    "another.user@example.net"
  ),
  OtherData = letters[1:6],
  stringsAsFactors = FALSE
)

# Clean the 'UserEmail' column
cleaned_df <- cleanemails(sample_df, "UserEmail")
print(cleaned_df)

# Example with a factor column
sample_df_factor <- sample_df
sample_df_factor$UserEmail <- as.factor(sample_df_factor$UserEmail)
cleaned_df_factor <- cleanemails(sample_df_factor, "UserEmail")
print(cleaned_df_factor)

}
